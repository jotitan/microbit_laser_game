{"entries":[{"timestamp":1745176069184,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})\n\nconsole.log(input.lightLevel())"],[1,"\n"]],"start1":0,"start2":0,"length1":65,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":241,"start2":241,"length1":32,"length2":31}]}]},{"timestamp":1745176102470,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"{\n\t\n})\n\n"],[1,"console.log(input.lightLevel())"]],"start1":26,"start2":26,"length1":8,"length2":39}]}]},{"timestamp":1745181875120,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"on () {\n"],[-1,"\n"],[1,"\t"],[0,"\n})\n\n"]],"start1":20,"start2":20,"length1":14,"length2":14}]}]},{"timestamp":1745181877274,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n"],[-1,"    console.log(input.lightLevel())\n    basic.pause(300)"],[1,"\n"],[0,"\n})\n"]],"start1":24,"start2":24,"length1":64,"length2":9}]}]},{"timestamp":1745181910101,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"cons"],[-1,"t level "],[1,"ole.log("],[0,"inpu"]],"start1":32,"start2":32,"length1":16,"length2":16}]}]},{"timestamp":1745182599477,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"evel"],[-1," ="],[0," inp"]],"start1":39,"start2":39,"length1":10,"length2":8}]}]},{"timestamp":1745182600338,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"el()"],[-1,";\n    if(analyze(level)){\n        basic.showIcon(IconNames.SmallHeart)\n    "],[1,")\n"],[0,"    "]],"start1":60,"start2":60,"length1":83,"length2":10},{"diffs":[[0,"use("],[-1,"2"],[1,"3"],[0,"00"],[-1,"0"],[0,")\n"],[-1,"        basic.clearScreen();\n    }\n})\n\nconst threashold = 200;\n\nfunction analyze(level: number):boolean{\n    if(level > threashold){\n        console.log(level)\n        return true;\n    }\n    return false;\n}"],[1,"})\n"],[0,"\n"]],"start1":78,"start2":78,"length1":217,"length2":13}]}]},{"timestamp":1745182834850,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"shold){\n"],[1,"        console.log(level)\n"],[0,"        "]],"start1":286,"start2":286,"length1":16,"length2":43}]}]},{"timestamp":1745184297624,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"alse;\n}\n"],[-1,"\n\n\n\n"]],"start1":333,"start2":333,"length1":12,"length2":8}]}]},{"timestamp":1745184309534,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"function checkLight"],[1,"basic.forever(function "],[0,"()"],[1," "],[0,"{\n  "]],"start1":0,"start2":0,"length1":25,"length2":30},{"diffs":[[0,";\n    if"],[-1," "],[0,"(analyze"]],"start1":64,"start2":64,"length1":17,"length2":16},{"diffs":[[0,"(level))"],[-1," "],[0,"{\n      "]],"start1":80,"start2":80,"length1":17,"length2":16},{"diffs":[[0,"\n    }\n}"],[1,")"],[0,"\n\nconst "]],"start1":189,"start2":189,"length1":16,"length2":17},{"diffs":[[0,"\n\n\n\n"],[-1,"new Config().run()"],[0,"\n"]],"start1":340,"start2":340,"length1":23,"length2":5}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"config.ts\",\n        \"game.ts\""],[0,"\n   "]],"start1":228,"start2":228,"length1":48,"length2":8}]},{"type":"added","filename":"config.ts","value":"class Config{\n    constructor(public player:number = 0){}\n    run(){\n        input.onButtonPressed(Button.B,()=>this.validate())\n        input.onButtonPressed(Button.A, () => this.changePlayer())\n        this.show();\n    }\n    show(){\n        basic.showNumber(this.player);\n    }\n    changePlayer(){\n        this.player = (this.player+1)%20;\n        this.show();\n    }\n    validate(){\n            // Check if player already exists\n            radio.setGroup(0)\n            radio.setTransmitPower(7)\n            radio.setFrequencyBand(0)\n            radio.sendValue(\"NEWP\",this.player)\n            \n    }\n}"},{"type":"added","filename":"game.ts","value":"class Game{\n    constructor(public player: number = 0){}\n}"}]},{"timestamp":1745185008581,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"config.ts","patch":[{"diffs":[[0,"        "],[-1,"basic."],[0,"\n    }\n}"]],"start1":589,"start2":589,"length1":22,"length2":16}]}]},{"timestamp":1745185184646,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"config.ts","patch":[{"diffs":[[0,"dio."],[-1,"onReceivedValue((key, value) => {\n                if (key === \"EXISTSP\" && value === 1){\n                    // Bad player\n                    basic.showIcon(IconNames.No)\n                    this.player = -1;\n                }\n            })\n            radio.sendValue(\"NEWP\",this.player)\n            const start = input.runningTime();\n            while(input.runningTime() - start < 2000){\n                // Wait 2 second\n            }\n            if(this.player === -1){\n                //Fuck off restart\n            }else{\n                radio.onReceivedValue(null)\n                // Next step\n                basic.showIcon(IconNames.Yes)\n            }"],[1,"sendValue(\"NEWP\",this.player)\n            basic."],[0,"\n   "]],"start1":551,"start2":551,"length1":670,"length2":56}]}]},{"timestamp":1745185565741,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"config.ts","patch":[{"diffs":[[0,"    "],[-1,"    this.start()\n            }\n    }\n    start(){\n        radio.onReceivedValue((key,value)=>{\n            if(key === \"EXISTSP\" && )\n        })"],[1,"}"],[0,"\n   "]],"start1":1212,"start2":1212,"length1":151,"length2":9}]}]},{"timestamp":1745186163033,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"config.ts","patch":[{"diffs":[[0,"> {\n"],[-1,"                console.log(\"FUCK\")\n"],[0,"    "]],"start1":585,"start2":585,"length1":44,"length2":8},{"diffs":[[0,"    "],[-1,"console.log(\"RECEIVED \" + key + \" \" + value + \" \" + this.player)\n            if(key === \"NEWP\" && value === this.player){\n                radio.sendValue(\"EXISTSP\",1)\n            }"],[1,"if(key === \"EXISTSP\" && )"],[0,"\n   "]],"start1":1319,"start2":1319,"length1":188,"length2":33}]}]},{"timestamp":1745186279873,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"config.ts","patch":[{"diffs":[[0,"();\n"],[-1,"            \n"],[0,"    "]],"start1":925,"start2":925,"length1":21,"length2":8}]}]},{"timestamp":1745228108633,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"config.ts","patch":[{"diffs":[[0,"        "],[-1,"basic."],[0,"\n       "]],"start1":933,"start2":933,"length1":22,"length2":16}]}]},{"timestamp":1745228110072,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"config.ts","patch":[{"diffs":[[-1,"let mode = 0;\n"],[0,"clas"]],"start1":0,"start2":0,"length1":18,"length2":4},{"diffs":[[0,"FUCK"],[-1," \" + key + \" \" + value"],[1,"\""],[0,")\n  "]],"start1":618,"start2":618,"length1":30,"length2":9},{"diffs":[[0," \"EXISTS"],[1,"P"],[0,"\" && val"]],"start1":652,"start2":652,"length1":16,"length2":17},{"diffs":[[0,"lue(\"NEW"],[1,"P"],[0,"\",this.p"]],"start1":858,"start2":858,"length1":16,"length2":17},{"diffs":[[0,"    "],[-1,"/* control.inBackground(()=>{"],[1," basic."],[0,"\n   "]],"start1":936,"start2":936,"length1":37,"length2":15},{"diffs":[[0,"    "],[-1,"    "],[0,"while"],[-1,"(true){\n                    if "],[0,"(inp"]],"start1":956,"start2":956,"length1":48,"length2":13},{"diffs":[[0,"art "],[-1,">"],[1,"<"],[0," 2000)"],[-1," "],[0,"{\n  "]],"start1":990,"start2":990,"length1":16,"length2":15},{"diffs":[[0,"    "],[-1,"        if(this.player === -1){\n                            this.player = 0;\n                            this.show();\n                        }else{\n                            radio.onReceivedValue(()=>{})\n                            basic.showIcon(IconNames.Yes)\n                            this.start();\n                        }\n                        break;\n                    }\n                }\n            })*/\n\n            \n            /*"],[1,"// Wait 2 second\n            }\n            "],[0,"if(t"]],"start1":1015,"start2":1015,"length1":457,"length2":51},{"diffs":[[0,"   }"],[-1,"*/"],[0,"\n   "]],"start1":1297,"start2":1297,"length1":10,"length2":8},{"diffs":[[0,"lue)=>{\n"],[1,"            console.log(\"RECEIVED \" + key + \" \" + value + \" \" + this.player)\n"],[0,"        "]],"start1":1358,"start2":1358,"length1":16,"length2":93},{"diffs":[[0,"=== \"NEW"],[1,"P"],[0,"\" && val"]],"start1":1462,"start2":1462,"length1":16,"length2":17},{"diffs":[[0,"(\"EXISTS"],[1,"P"],[0,"\",1)\n   "]],"start1":1531,"start2":1531,"length1":16,"length2":17}]}]},{"timestamp":1745228690071,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"config.ts","patch":[{"diffs":[[0,")=>this."],[-1,"join"],[1,"validate"],[0,"())\n    "]],"start1":123,"start2":123,"length1":20,"length2":24},{"diffs":[[0,"  }\n    "],[-1,"join"],[1,"validate"],[0,"(){\n    "]],"start1":379,"start2":379,"length1":20,"length2":24},{"diffs":[[0,"e) => {\n"],[1,"                console.log(\"FUCK \" + key + \" \" + value)\n"],[0,"        "]],"start1":595,"start2":595,"length1":16,"length2":73},{"diffs":[[0,"\n           "],[1,"/*"],[0," control.inB"]],"start1":961,"start2":961,"length1":24,"length2":26},{"diffs":[[0,"    "],[-1,"basic.pause(1000)\n"],[1,"while(true){\n                    if (input.runningTime() - start > 2000) {\n       "],[0,"    "]],"start1":1015,"start2":1015,"length1":26,"length2":90},{"diffs":[[0,"        "],[1," "],[0,"if(this."]],"start1":1109,"start2":1109,"length1":16,"length2":17},{"diffs":[[0,"                "],[1,"        "],[0,"this.player = 0;"]],"start1":1146,"start2":1146,"length1":32,"length2":40},{"diffs":[[0,"                "],[1,"  "],[1,"      "],[0,"this.show();\n   "]],"start1":1191,"start2":1191,"length1":32,"length2":40},{"diffs":[[0,"    "],[1,"    "],[1,"    "],[0,"}else{\n"],[1,"        "],[0,"    "]],"start1":1240,"start2":1240,"length1":15,"length2":31},{"diffs":[[0,"edValue(()=>{})\n"],[1,"        "],[0,"                "]],"start1":1301,"start2":1301,"length1":32,"length2":40},{"diffs":[[0,"    "],[-1,"this.joined"],[1,"        this.start"],[0,"();\n"]],"start1":1391,"start2":1391,"length1":19,"length2":26},{"diffs":[[0,"                "],[1," "],[1,"       "],[0,"}\n            })"]],"start1":1417,"start2":1417,"length1":32,"length2":40},{"diffs":[[0,"    "],[-1,"})\n    }\n    joined(){\n        input.onButtonPressed(Button.A,()=>{})\n        input.onButtonPressed(Button.B, ()=>this.start(true))\n        radio.onReceivedValue((key,value)=>{\n            if(key === \"NEW\" && value === this.player){\n                radio.sendValue(\"EXISTS\",1)\n            }\n            if(key === \"START\" && value === 1){"],[1,"            break;\n                    }\n                }\n            })*/\n\n            \n            /*if(this.player === -1){\n                //Fuck off restart\n            }else{\n                radio.onReceivedValue(null)\n                // Next step\n                basic.showIcon(IconNames.Yes)"],[0,"\n   "]],"start1":1451,"start2":1451,"length1":346,"length2":308},{"diffs":[[0,"    this.start()"],[-1,";"],[0,"\n            }\n "]],"start1":1768,"start2":1768,"length1":33,"length2":32},{"diffs":[[0,"   }"],[-1,"\n        })"],[1,"*/"],[0,"\n   "]],"start1":1794,"start2":1794,"length1":19,"length2":10},{"diffs":[[0,"art("],[-1,"first: boolean = false"],[0,"){\n "]],"start1":1813,"start2":1813,"length1":30,"length2":8},{"diffs":[[0,"ue(("],[-1,")=>{})\n        if(first){\n"],[1,"key,value)=>{\n            if(key === \"NEW\" && value === this.player){\n    "],[0,"    "]],"start1":1847,"start2":1847,"length1":34,"length2":82},{"diffs":[[0,"ue(\""],[-1,"START"],[1,"EXISTS"],[0,"\",1)\n"],[1,"    "],[0,"    "]],"start1":1950,"start2":1950,"length1":18,"length2":23},{"diffs":[[0,"    "],[-1,"basic.showIcon(IconNames.Skull"],[1,"}"],[0,")\n  "]],"start1":1983,"start2":1983,"length1":38,"length2":9}]}]},{"timestamp":1745229276809,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"config.ts","patch":[{"diffs":[[0,"    "],[-1,"new Game(this.player).start();"],[1," basic.showIcon(IconNames.Skull)"],[0,"\n   "]],"start1":1812,"start2":1812,"length1":38,"length2":40}]},{"type":"edited","filename":"game.ts","patch":[{"diffs":[[0,"){}\n"],[-1,"    threashold = 200;\n    start(){\n        basic.showIcon(IconNames.Heart)\n        this.initShootReceiver()\n    }\n    initShootReceiver(){\n        basic.forever(()=>this.checkLight())\n    }\n    checkLight() {\n        const level = input.lightLevel();\n        if (analyze(level)) {\n            basic.showIcon(IconNames.Skull)\n            basic.pause(2000)\n            basic.clearScreen();\n        }\n    }\n    analyzeShoot(level: number): boolean {\n        return level > threashold;\n    }\n"],[0,"}"]],"start1":53,"start2":53,"length1":493,"length2":5}]}]},{"timestamp":1745229818144,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"game.ts","patch":[{"diffs":[[0," = 0"],[-1,", livze"],[0,"){}\n"]],"start1":49,"start2":49,"length1":15,"length2":8}]}]},{"timestamp":1745234630806,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"game.ts","patch":[{"diffs":[[0,"= 0, liv"],[1,"ze"],[0,"){}\n    "]],"start1":50,"start2":50,"length1":16,"length2":18}]}]},{"timestamp":1745234631380,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"game.ts","patch":[{"diffs":[[0," 0, "],[-1,"public lives: number = 15"],[1,"liv"],[0,"){}\n"]],"start1":51,"start2":51,"length1":33,"length2":11},{"diffs":[[0,"    "],[-1,"isDead():boolean{\n        return this.lives <= 1;\n    }\n    dead(){\n        basic.showIcon\n    }\n    shooted(){"],[1,"checkLight() {\n        const level = input.lightLevel();"],[0,"\n   "]],"start1":252,"start2":252,"length1":119,"length2":64},{"diffs":[[0,"  if"],[-1,"(this.isDead("],[1," (analyze(level"],[0,"))"],[1," "],[0,"{\n    "],[-1,"        this.dead();\n        }\n"],[0,"    "]],"start1":319,"start2":319,"length1":60,"length2":32},{"diffs":[[0,"ll)\n        "],[1,"    "],[0,"basic.pause("]],"start1":383,"start2":383,"length1":24,"length2":28},{"diffs":[[0,"00)\n        "],[1,"    "],[0,"basic.clearS"]],"start1":413,"start2":413,"length1":24,"length2":28},{"diffs":[[0,"();\n"],[-1,"        this.lives--;\n    }\n    checkLight() {\n        const level = input.lightLevel();\n        if (analyze(level)) {\n            this.shooted();\n"],[0,"    "]],"start1":446,"start2":446,"length1":155,"length2":8}]}]},{"timestamp":1745234754988,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"game.ts","patch":[{"diffs":[[0,"Icon"],[-1,"(IconNames.Skull);\n        this.lives = 0;"],[0,"\n   "]],"start1":364,"start2":364,"length1":50,"length2":8},{"diffs":[[0,"();\n"],[-1,"            return;\n"],[0,"    "]],"start1":438,"start2":438,"length1":28,"length2":8},{"diffs":[[0,"es.S"],[-1,"mallDiamond)\n        basic.showIcon(IconNames.Diamond)\n        basic.showIcon(IconNames.SmallDiamond)\n"],[1,"kull)"],[0,"\n   "]],"start1":482,"start2":482,"length1":110,"length2":13}]}]},{"timestamp":1745235384824,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"game.ts","patch":[{"diffs":[[0,"        "],[1,"this.lives--;"],[0,"\n    }\n "]],"start1":706,"start2":706,"length1":16,"length2":29}]}]},{"timestamp":1745235406262,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"game.ts","patch":[{"diffs":[[0,"ives <= "],[-1,"0"],[1,"1"],[0,";\n    }\n"]],"start1":317,"start2":317,"length1":17,"length2":17},{"diffs":[[0,"(){\n"],[-1,"        this.lives--;\n"],[0,"    "]],"start1":428,"start2":428,"length1":30,"length2":8},{"diffs":[[0,"arScreen();\n"],[1,"        \n"],[0,"    }\n    ch"]],"start1":694,"start2":694,"length1":24,"length2":33}]}]},{"timestamp":1745235413573,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"game.ts","patch":[{"diffs":[[0,"r = "],[-1,"3"],[1,"15"],[0,"){}\n"]],"start1":74,"start2":74,"length1":9,"length2":10}]}]},{"timestamp":1745246495417,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"game.ts","patch":[{"diffs":[[0,"(){\n"],[-1,"        \n"],[0,"    "]],"start1":114,"start2":114,"length1":17,"length2":8}]}]},{"timestamp":1745246544019,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"game.ts","patch":[{"diffs":[[-1,"const numberOfLives: number = 10;\n\n"],[0,"clas"]],"start1":0,"start2":0,"length1":39,"length2":4},{"diffs":[[0,"umber = "],[-1,"numberOfLives"],[1,"3"],[0,"){}\n    "]],"start1":70,"start2":70,"length1":29,"length2":17},{"diffs":[[0,"    "],[-1,"input.onButtonPressed(Button.A,()=>{})\n        input.onButtonPressed(Button.B, () => { })"],[0,"\n   "]],"start1":122,"start2":122,"length1":97,"length2":8},{"diffs":[[0,"nd)\n"],[-1,"        led.plotBarGraph(this.lives, numberOfLives)"],[0,"\n   "]],"start1":676,"start2":676,"length1":59,"length2":8}]}]},{"timestamp":1745246710941,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"game.ts","patch":[{"diffs":[[0,"me{\n"],[-1,"    \n"],[0,"    "]],"start1":43,"start2":43,"length1":13,"length2":8}]}]},{"timestamp":1745247318703,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"game.ts","patch":[{"diffs":[[0,"me{\n    "],[-1,"lives"],[0,"\n    con"]],"start1":43,"start2":43,"length1":21,"length2":16}]}]},{"timestamp":1745247324238,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"game.ts","patch":[{"diffs":[[0,"   lives"],[-1,": number"],[0,"\n    con"]],"start1":48,"start2":48,"length1":24,"length2":16},{"diffs":[[0,"mber = 0"],[-1,"){\n        this.lives"],[1,", public lives: number"],[0," = numbe"]],"start1":90,"start2":90,"length1":37,"length2":38},{"diffs":[[0,"rOfLives"],[-1,";\n    "],[1,"){"],[0,"}\n    th"]],"start1":128,"start2":128,"length1":22,"length2":18}]}]},{"timestamp":1745247337159,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"laser_gam"],[1,"test_light_mesur"],[0,"e\",\n"]],"start1":11,"start2":11,"length1":17,"length2":24}]}]},{"timestamp":1745253941229,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":114}]}]},{"timestamp":1745253968678,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":269,"start2":269,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// les tests vont ici ; cela ne sera pas compilé si ce paquet est utilisé en tant qu'extension.\n"}]}],"snapshots":[{"timestamp":1745176069183,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"test_light_mesure\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1745181875120,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n\nconsole.log(input.lightLevel())","README.md":"","pxt.json":"{\n    \"name\": \"test_light_mesure\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1745184297624,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"basic.forever(function () {\n    const level = input.lightLevel();\n    if(analyze(level)){\n        basic.showIcon(IconNames.SmallHeart)\n        basic.pause(2000)\n        basic.clearScreen();\n    }\n})\n\nconst threashold = 200;\n\nfunction analyze(level: number):boolean{\n    if(level > threashold){\n        console.log(level)\n        return true;\n    }\n    return false;\n}\n","README.md":"","pxt.json":"{\n    \"name\": \"test_light_mesure\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1745186132654,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"function checkLight(){\n    const level = input.lightLevel();\n    if (analyze(level)) {\n        basic.showIcon(IconNames.SmallHeart)\n        basic.pause(2000)\n        basic.clearScreen();\n    }\n}\n\nconst threashold = 200;\n\nfunction analyze(level: number):boolean{\n    if(level > threashold){\n        return true;\n    }\n    return false;\n}\n\n\n\nnew Config().run()\n","README.md":"","config.ts":"class Config{\n    constructor(public player:number = 0){}\n    run(){\n        input.onButtonPressed(Button.B,()=>this.validate())\n        input.onButtonPressed(Button.A, () => this.changePlayer())\n        this.show();\n    }\n    show(){\n        basic.showNumber(this.player);\n    }\n    changePlayer(){\n        this.player = (this.player+1)%20;\n        this.show();\n    }\n    validate(){\n            // Check if player already exists\n            radio.setGroup(0)\n            radio.setTransmitPower(7)\n            radio.setFrequencyBand(0)\n            radio.onReceivedValue((key, value) => {\n                if (key === \"EXISTSP\" && value === 1){\n                    // Bad player\n                    basic.showIcon(IconNames.No)\n                    this.player = -1;\n                }\n            })\n            radio.sendValue(\"NEWP\",this.player)\n            const start = input.runningTime();\n            while(input.runningTime() - start < 2000){\n                // Wait 2 second\n            }\n            if(this.player === -1){\n                //Fuck off restart\n            }else{\n                radio.onReceivedValue(null)\n                // Next step\n                basic.showIcon(IconNames.Yes)\n            }\n    }\n}","game.ts":"class Game{\n    constructor(public player: number = 0){}\n}","pxt.json":"{\n    \"name\": \"test_light_mesure\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"config.ts\",\n        \"game.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1745228108633,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"function checkLight(){\n    const level = input.lightLevel();\n    if (analyze(level)) {\n        basic.showIcon(IconNames.SmallHeart)\n        basic.pause(2000)\n        basic.clearScreen();\n    }\n}\n\nconst threashold = 200;\n\nfunction analyze(level: number):boolean{\n    if(level > threashold){\n        return true;\n    }\n    return false;\n}\n\n\n\nnew Config().run()\n","README.md":"","config.ts":"class Config{\n    constructor(public player:number = 0){}\n    run(){\n        input.onButtonPressed(Button.B,()=>this.validate())\n        input.onButtonPressed(Button.A, () => this.changePlayer())\n        this.show();\n    }\n    show(){\n        basic.showNumber(this.player);\n    }\n    changePlayer(){\n        this.player = (this.player+1)%20;\n        this.show();\n    }\n    validate(){\n            // Check if player already exists\n            radio.setGroup(0)\n            radio.setTransmitPower(7)\n            radio.setFrequencyBand(0)\n            radio.onReceivedValue((key, value) => {\n                console.log(\"FUCK\")\n                if (key === \"EXISTSP\" && value === 1){\n                    // Bad player\n                    basic.showIcon(IconNames.No)\n                    this.player = -1;\n                }\n            })\n            radio.sendValue(\"NEWP\",this.player)\n            const start = input.runningTime();\n            while(input.runningTime() - start < 2000){\n                // Wait 2 second\n            }\n            if(this.player === -1){\n                //Fuck off restart\n            }else{\n                radio.onReceivedValue(null)\n                // Next step\n                basic.showIcon(IconNames.Yes)\n                this.start()\n            }\n    }\n    start(){\n        radio.onReceivedValue((key,value)=>{\n            console.log(\"RECEIVED \" + key + \" \" + value + \" \" + this.player)\n            if(key === \"NEWP\" && value === this.player){\n                radio.sendValue(\"EXISTSP\",1)\n            }\n        })\n    }\n}","game.ts":"class Game{\n    constructor(public player: number = 0){}\n}","pxt.json":"{\n    \"name\": \"test_light_mesure\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"config.ts\",\n        \"game.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1745234630806,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"function checkLight(){\n    const level = input.lightLevel();\n    if (analyze(level)) {\n        basic.showIcon(IconNames.SmallHeart)\n        basic.pause(2000)\n        basic.clearScreen();\n    }\n}\n\nconst threashold = 200;\n\nfunction analyze(level: number):boolean{\n    if(level > threashold){\n        return true;\n    }\n    return false;\n}\n\n\n\nnew Config().run()\n","README.md":"","config.ts":"let mode = 0;\nclass Config{\n    constructor(public player:number = 0){}\n    run(){\n        input.onButtonPressed(Button.B,()=>this.join())\n        input.onButtonPressed(Button.A, () => this.changePlayer())\n        this.show();\n    }\n    show(){\n        basic.showNumber(this.player);\n    }\n    changePlayer(){\n        this.player = (this.player+1)%20;\n        this.show();\n    }\n    join(){\n            // Check if player already exists\n            radio.setGroup(0)\n            radio.setTransmitPower(7)\n            radio.setFrequencyBand(0)\n            radio.onReceivedValue((key, value) => {\n                if (key === \"EXISTS\" && value === 1){\n                    // Bad player\n                    basic.showIcon(IconNames.No)\n                    this.player = -1;\n                }\n            })\n            radio.sendValue(\"NEW\",this.player)\n            const start = input.runningTime();\n            control.inBackground(()=>{\n                basic.pause(1000)\n                if(this.player === -1){\n                    this.player = 0;\n                    this.show();\n                }else{\n                    radio.onReceivedValue(()=>{})\n                    basic.showIcon(IconNames.Yes)\n                    this.joined();\n                }\n            })\n    }\n    joined(){\n        input.onButtonPressed(Button.A,()=>{})\n        input.onButtonPressed(Button.B, ()=>this.start(true))\n        radio.onReceivedValue((key,value)=>{\n            if(key === \"NEW\" && value === this.player){\n                radio.sendValue(\"EXISTS\",1)\n            }\n            if(key === \"START\" && value === 1){\n                this.start();\n            }\n        })\n    }\n    start(first: boolean = false){\n        radio.onReceivedValue(()=>{})\n        if(first){\n            radio.sendValue(\"START\",1)\n        }\n       new Game(this.player).start();\n    }\n}","game.ts":"class Game{\n    constructor(public player: number = 0){}\n    threashold = 200;\n    start(){\n        basic.showIcon(IconNames.Heart)\n        this.initShootReceiver()\n    }\n    initShootReceiver(){\n        basic.forever(()=>this.checkLight())\n    }\n    checkLight() {\n        const level = input.lightLevel();\n        if (analyze(level)) {\n            basic.showIcon(IconNames.Skull)\n            basic.pause(2000)\n            basic.clearScreen();\n        }\n    }\n    analyzeShoot(level: number): boolean {\n        return level > threashold;\n    }\n}","pxt.json":"{\n    \"name\": \"test_light_mesure\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"config.ts\",\n        \"game.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1745246495417,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"function checkLight(){\n    const level = input.lightLevel();\n    if (analyze(level)) {\n        basic.showIcon(IconNames.SmallHeart)\n        basic.pause(2000)\n        basic.clearScreen();\n    }\n}\n\nconst threashold = 200;\n\nfunction analyze(level: number):boolean{\n    if(level > threashold){\n        return true;\n    }\n    return false;\n}\n\n\n\nnew Config().run()\n","README.md":"","config.ts":"let mode = 0;\nclass Config{\n    constructor(public player:number = 0){}\n    run(){\n        input.onButtonPressed(Button.B,()=>this.join())\n        input.onButtonPressed(Button.A, () => this.changePlayer())\n        this.show();\n    }\n    show(){\n        basic.showNumber(this.player);\n    }\n    changePlayer(){\n        this.player = (this.player+1)%20;\n        this.show();\n    }\n    join(){\n            // Check if player already exists\n            radio.setGroup(0)\n            radio.setTransmitPower(7)\n            radio.setFrequencyBand(0)\n            radio.onReceivedValue((key, value) => {\n                if (key === \"EXISTS\" && value === 1){\n                    // Bad player\n                    basic.showIcon(IconNames.No)\n                    this.player = -1;\n                }\n            })\n            radio.sendValue(\"NEW\",this.player)\n            const start = input.runningTime();\n            control.inBackground(()=>{\n                basic.pause(1000)\n                if(this.player === -1){\n                    this.player = 0;\n                    this.show();\n                }else{\n                    radio.onReceivedValue(()=>{})\n                    basic.showIcon(IconNames.Yes)\n                    this.joined();\n                }\n            })\n    }\n    joined(){\n        input.onButtonPressed(Button.A,()=>{})\n        input.onButtonPressed(Button.B, ()=>this.start(true))\n        radio.onReceivedValue((key,value)=>{\n            if(key === \"NEW\" && value === this.player){\n                radio.sendValue(\"EXISTS\",1)\n            }\n            if(key === \"START\" && value === 1){\n                this.start();\n            }\n        })\n    }\n    start(first: boolean = false){\n        radio.onReceivedValue(()=>{})\n        if(first){\n            radio.sendValue(\"START\",1)\n        }\n       new Game(this.player).start();\n    }\n}","game.ts":"class Game{\n    constructor(public player: number = 0, public lives: number = 15){}\n    threashold = 200;\n    start(){\n        basic.showIcon(IconNames.Heart)\n        this.initShootReceiver()\n    }\n    initShootReceiver(){\n        basic.forever(()=>this.checkLight())\n    }\n    isDead():boolean{\n        return this.lives <= 0;\n    }\n    dead(){\n        basic.showIcon(IconNames.Skull);\n        this.lives = 0;\n    }\n    shooted(){\n        this.lives--;\n        if(this.isDead()){\n            this.dead();\n            return;\n        }\n        basic.showIcon(IconNames.SmallDiamond)\n        basic.showIcon(IconNames.Diamond)\n        basic.showIcon(IconNames.SmallDiamond)\n\n        basic.pause(2000)\n        basic.clearScreen();\n    }\n    checkLight() {\n        const level = input.lightLevel();\n        if (analyze(level)) {\n            this.shooted();\n        }\n    }\n    analyzeShoot(level: number): boolean {\n        return level > threashold;\n    }\n}","pxt.json":"{\n    \"name\": \"test_light_mesure\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"config.ts\",\n        \"game.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1745253941229,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"function checkLight(){\n    const level = input.lightLevel();\n    if (analyze(level)) {\n        basic.showIcon(IconNames.SmallHeart)\n        basic.pause(2000)\n        basic.clearScreen();\n    }\n}\n\nconst threashold = 200;\n\nfunction analyze(level: number):boolean{\n    if(level > threashold){\n        return true;\n    }\n    return false;\n}\n\n\n\nnew Config().run()\n","README.md":"","config.ts":"let mode = 0;\nclass Config{\n    constructor(public player:number = 0){}\n    run(){\n        input.onButtonPressed(Button.B,()=>this.join())\n        input.onButtonPressed(Button.A, () => this.changePlayer())\n        this.show();\n    }\n    show(){\n        basic.showNumber(this.player);\n    }\n    changePlayer(){\n        this.player = (this.player+1)%20;\n        this.show();\n    }\n    join(){\n            // Check if player already exists\n            radio.setGroup(0)\n            radio.setTransmitPower(7)\n            radio.setFrequencyBand(0)\n            radio.onReceivedValue((key, value) => {\n                if (key === \"EXISTS\" && value === 1){\n                    // Bad player\n                    basic.showIcon(IconNames.No)\n                    this.player = -1;\n                }\n            })\n            radio.sendValue(\"NEW\",this.player)\n            const start = input.runningTime();\n            control.inBackground(()=>{\n                basic.pause(1000)\n                if(this.player === -1){\n                    this.player = 0;\n                    this.show();\n                }else{\n                    radio.onReceivedValue(()=>{})\n                    basic.showIcon(IconNames.Yes)\n                    this.joined();\n                }\n            })\n    }\n    joined(){\n        input.onButtonPressed(Button.A,()=>{})\n        input.onButtonPressed(Button.B, ()=>this.start(true))\n        radio.onReceivedValue((key,value)=>{\n            if(key === \"NEW\" && value === this.player){\n                radio.sendValue(\"EXISTS\",1)\n            }\n            if(key === \"START\" && value === 1){\n                this.start();\n            }\n        })\n    }\n    start(first: boolean = false){\n        radio.onReceivedValue(()=>{})\n        if(first){\n            radio.sendValue(\"START\",1)\n        }\n       new Game(this.player).start();\n    }\n}","game.ts":"const numberOfLives: number = 10;\n\nclass Game{\n    lives: number\n    constructor(public player: number = 0){\n        this.lives = numberOfLives;\n    }\n    threashold = 200;\n    start(){\n        input.onButtonPressed(Button.A,()=>{})\n        input.onButtonPressed(Button.B, () => { })\n        basic.showIcon(IconNames.Heart)\n        this.initShootReceiver()\n    }\n    initShootReceiver(){\n        basic.forever(()=>this.checkLight())\n    }\n    isDead():boolean{\n        return this.lives <= 0;\n    }\n    dead(){\n        basic.showIcon(IconNames.Skull);\n        this.lives = 0;\n    }\n    shooted(){\n        this.lives--;\n        if(this.isDead()){\n            this.dead();\n            return;\n        }\n        basic.showIcon(IconNames.SmallDiamond)\n        basic.showIcon(IconNames.Diamond)\n        basic.showIcon(IconNames.SmallDiamond)\n        led.plotBarGraph(this.lives, numberOfLives)\n        basic.pause(2000)\n        basic.clearScreen();\n    }\n    checkLight() {\n        const level = input.lightLevel();\n        if (analyze(level)) {\n            this.shooted();\n        }\n    }\n    analyzeShoot(level: number): boolean {\n        return level > threashold;\n    }\n}","pxt.json":"{\n    \"name\": \"test_light_mesure\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"config.ts\",\n        \"game.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1745253968682}